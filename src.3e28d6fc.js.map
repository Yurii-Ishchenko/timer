{"version":3,"sources":["index.js"],"names":["refs","btnstart","document","querySelector","btnstop","clockface","textContent","timer","intervalId","isActive","face","start","startTime","Date","now","setInterval","currentTime","getTimeComponents","updateClockFace","hours","mins","secs","stop","clearInterval","pad","value","String","padStart","time","Math","floor","addEventListener"],"mappings":";AAAA,IAAMA,EAAO,CACTC,SAAUC,SAASC,cAAc,aACjCC,QAASF,SAASC,cAAc,YAChCE,UAAWH,SAASC,cAAc,kBAGtCH,EAAKK,UAAUC,YACf,WA8CA,IAAMC,EAAQ,CACVC,WAAY,KACZC,UAAU,EACVC,KAAMV,EAAKK,UAAUC,YAHX,WAMVK,MAAQ,WACA,IAAA,KAAKF,SAAL,CAGCA,KAAAA,UAAW,EACVG,IAAAA,EAAYC,KAAKC,MAElBN,KAAAA,WAAaO,YAAY,WACpBC,IAGuBC,EAAAA,EAHTJ,KAAKC,MAEOF,GAEhCM,EAAgB,CAAEC,MADVA,EAAAA,MACiBC,KADVA,EAAAA,KACgBC,KADVA,EAAAA,QAGtB,OAEPC,KAAO,WACHC,cAAc,KAAKf,YACdC,KAAAA,UAAW,EAChBT,EAAKK,UAAUC,YAAf,aAWR,SAASY,EAAuC,GAArBC,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACpCrB,EAAKK,UAAUC,YAAiBa,GAAAA,OAAAA,EAASC,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,GAGrD,SAASG,EAAIC,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAErC,SAASV,EAAkBW,GAIhB,MAAA,CAAET,MAHCK,EAAIK,KAAKC,MAAOF,EAAQ,MAAyB,OAG3CR,KAFPI,EAAIK,KAAKC,MAAOF,EAAQ,KAAoB,MAE/BP,KADbG,EAAIK,KAAKC,MAAOF,EAAQ,IAAc,OAjBnD5B,EAAKC,SAAS8B,iBAAiB,QAAS,WACpCxB,EAAMI,UAGVX,EAAKI,QAAQ2B,iBAAiB,QAAS,WACnCxB,EAAMe","file":"src.3e28d6fc.js","sourceRoot":"..\\src","sourcesContent":["const refs = {\r\n    btnstart: document.querySelector('.btnStart'),\r\n    btnstop: document.querySelector('.btnStop'),\r\n    clockface: document.querySelector('.js-clockface')\r\n}\r\n\r\nrefs.clockface.textContent = `00:00:00`\r\n// class Timer {\r\n//     constructor() {\r\n//     this.intervalId = null,\r\n//     this.isActive = false\r\n//     // this.face = refs.clockface.textContent = `00:00:00`\r\n//     }\r\n//     face() {\r\n//         refs.clockface.textContent = `00:00:00`\r\n//     }\r\n//     start() {\r\n//         if (this.isActive) {\r\n//             return\r\n//         }\r\n//         this.isActive = true\r\n//         const startTime = Date.now()\r\n\r\n//         this.intervalId = setInterval(() => {\r\n//             const currentTime = Date.now()\r\n\r\n//             const deltaTime = currentTime - startTime\r\n//             const { hours, mins, secs } = this.getTimeComponents(deltaTime)\r\n//             updateClockFace({ hours, mins, secs })\r\n//             // const clockk = `${hours}:${mins}:${secs}`\r\n//             // console.log(clockk)\r\n//         }, 1000)\r\n//     }\r\n//     stop() {\r\n//         clearInterval(this.intervalId)\r\n//         this.isActive = false\r\n//         refs.clockface.textContent = `00:00:00`\r\n//     }\r\n//     pad(value) {\r\n//     return String(value).padStart(2, '0')\r\n//     }\r\n// getTimeComponents(time) {\r\n// const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n// const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n// const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n//     return { hours, mins, secs}\r\n//     }\r\n    \r\n// }\r\n// const timer = new Timer({\r\n//     onTick: updateClockFace({ hours, mins, secs })\r\n//     // ({ hours, mins, secs })\r\n// })\r\nconst timer = {\r\n    intervalId: null,\r\n    isActive: false,\r\n    face: refs.clockface.textContent = `00:00:00`,\r\n    \r\n    \r\n    start() {\r\n        if (this.isActive) {\r\n            return\r\n        }\r\n        this.isActive = true\r\n        const startTime = Date.now()\r\n\r\n        this.intervalId = setInterval(() => {\r\n            const currentTime = Date.now()\r\n\r\n            const deltaTime = currentTime - startTime\r\n            const { hours, mins, secs} = getTimeComponents(deltaTime)\r\n            updateClockFace({ hours, mins, secs })\r\n\r\n        }, 1000)\r\n        },\r\n    stop() {\r\n        clearInterval(this.intervalId)\r\n        this.isActive = false\r\n        refs.clockface.textContent = `00:00:00`\r\n    }\r\n}\r\n\r\nrefs.btnstart.addEventListener('click', () => {\r\n    timer.start()\r\n})\r\n\r\nrefs.btnstop.addEventListener('click', () => {\r\n    timer.stop()\r\n})\r\nfunction updateClockFace({ hours, mins, secs }) {\r\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`\r\n}\r\n\r\nfunction pad(value) {\r\n    return String(value).padStart(2, '0')\r\n}\r\nfunction getTimeComponents(time) {\r\nconst hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\nconst mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\nconst secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    return { hours, mins, secs}\r\n}\r\n"]}