{"version":3,"sources":["index5.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","Promise","resolve","reject","delay","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";AAwDA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GAEd,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAE3BC,IAAAA,EAAQX,EAA0B,IAAM,KAC5CY,WAAW,WACUT,KAAKE,SAAW,GAG7BI,EAAQ,CAACI,GAAIN,EAAYM,GAAIC,KAAMH,IAEvCD,EAAOH,EAAYM,KAEpBF,MAKCI,EAAa,SAAkB,GAAfF,IAAAA,EAAAA,EAAAA,GAAIC,EAAAA,EAAAA,KACxBE,QAAQC,IAAmBJ,eAAAA,OAAAA,EAAmBC,kBAAAA,OAAAA,EAA9C,QAGII,EAAW,SAAAL,GACfG,QAAQG,KAAqCN,gCAAAA,OAAAA,EAA7C,+BAaFP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ","file":"index5.d12f9363.js","sourceRoot":"..\\src","sourcesContent":["// const delay = ms => {\r\n//     return new Promise((resolve) => {\r\n//         setTimeout(() => {\r\n//             resolve(ms)\r\n//         }, ms)\r\n//     })\r\n// }\r\n\r\n\r\n// const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// // Вызовы функции для проверки\r\n// delay(2000).then(logger); // Resolved after 2000ms\r\n// delay(1000).then(logger); // Resolved after 1000ms\r\n// delay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n\r\n\r\n\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName) => {\r\n//     return new Promise((resolve) => {\r\n// const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user\r\n// )\r\n// resolve(updatedUsers)\r\n//     })\r\n\r\n\r\n// //   callback(updatedUsers);\r\n// };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /*\r\n//  * Сейчас работает так\r\n//  */\r\n// // toggleUserState(users, 'Mango', logger);\r\n// // toggleUserState(users, 'Lux', logger);\r\n\r\n// /*\r\n//  * Должно работать так\r\n//  */\r\n// toggleUserState(users, 'Mango').then(logger);\r\n// toggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    \r\n    return new Promise((resolve, reject) => {\r\n  \r\nconst delay = randomIntegerFromInterval(2000, 5000)\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n          resolve({id: transaction.id, time: delay});\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n    })\r\n\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"]}