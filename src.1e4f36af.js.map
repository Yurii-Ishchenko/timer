{"version":3,"sources":["index.js"],"names":["refs","btnstart","document","querySelector","btnstop","clockface","Timer","intervalId","isActive","textContent","startTime","Date","now","setInterval","currentTime","deltaTime","getTimeComponents","updateClockFace","hours","mins","secs","clearInterval","value","String","padStart","time","pad","Math","floor","timer","onTick","addEventListener","start","stop"],"mappings":";AAqGA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EArGA,IAAMA,EAAO,CACTC,SAAUC,SAASC,cAAc,aACjCC,QAASF,SAASC,cAAc,YAChCE,UAAWH,SAASC,cAAc,kBAIhCG,EAAAA,WACY,SAAA,IAAA,EAAA,KAAA,GACTC,KAAAA,WAAa,KAClB,KAAKC,UAAW,EA2FpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAxFW,MAAA,WACHR,EAAKK,UAAUI,YAAf,aAuFR,CAAA,IAAA,QArFY,MAAA,WAAA,IAAA,EAAA,KACA,IAAA,KAAKD,SAAL,CAGCA,KAAAA,UAAW,EACVE,IAAAA,EAAYC,KAAKC,MAElBL,KAAAA,WAAaM,YAAY,WACpBC,IAEAC,EAFcJ,KAAKC,MAEOF,EACF,EAAA,EAAKM,kBAAkBD,GACrDE,EAAgB,CAAEC,MADVA,EAAAA,MACiBC,KADVA,EAAAA,KACgBC,KADVA,EAAAA,QAItB,QAsEX,CAAA,IAAA,OApEW,MAAA,WACHC,cAAc,KAAKd,YACdC,KAAAA,UAAW,EAChBR,EAAKK,UAAUI,YAAf,aAiER,CAAA,IAAA,MA/DQa,MAAAA,SAAAA,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OA8DrC,CAAA,IAAA,oBA5DkBC,MAAAA,SAAAA,GAIP,MAAA,CAAEP,MAHC,KAAKQ,IAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAGhDN,KAFP,KAAKO,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAEpCL,KADb,KAAKM,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,WAyDxD,EA9FMnB,GA0CAuB,EAAQ,IAAIvB,EAAM,CACpBwB,OAAQb,EAAgB,CAAEC,MAAAA,MAAOC,KAAAA,KAAMC,KAAAA,SAuC3C,SAASH,EAAuC,GAArBC,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACpCpB,EAAKK,UAAUI,YAAiBS,GAAAA,OAAAA,EAASC,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,GARrDpB,EAAKC,SAAS8B,iBAAiB,QAAS,WACpCF,EAAMG,UAGVhC,EAAKI,QAAQ2B,iBAAiB,QAAS,WACnCF,EAAMI","file":"src.1e4f36af.js","sourceRoot":"..\\src","sourcesContent":["const refs = {\r\n    btnstart: document.querySelector('.btnStart'),\r\n    btnstop: document.querySelector('.btnStop'),\r\n    clockface: document.querySelector('.js-clockface')\r\n}\r\n\r\n// refs.clockface.textContent = `00:00:00`\r\nclass Timer {\r\n    constructor() {\r\n    this.intervalId = null,\r\n    this.isActive = false\r\n    // this.face = refs.clockface.textContent = `00:00:00`\r\n    }\r\n    face() {\r\n        refs.clockface.textContent = `00:00:00`\r\n    }\r\n    start() {\r\n        if (this.isActive) {\r\n            return\r\n        }\r\n        this.isActive = true\r\n        const startTime = Date.now()\r\n\r\n        this.intervalId = setInterval(() => {\r\n            const currentTime = Date.now()\r\n\r\n            const deltaTime = currentTime - startTime\r\n            const { hours, mins, secs } = this.getTimeComponents(deltaTime)\r\n            updateClockFace({ hours, mins, secs })\r\n            // const clockk = `${hours}:${mins}:${secs}`\r\n            // console.log(clockk)\r\n        }, 1000)\r\n    }\r\n    stop() {\r\n        clearInterval(this.intervalId)\r\n        this.isActive = false\r\n        refs.clockface.textContent = `00:00:00`\r\n    }\r\n    pad(value) {\r\n    return String(value).padStart(2, '0')\r\n    }\r\ngetTimeComponents(time) {\r\nconst hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\nconst mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\nconst secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    return { hours, mins, secs}\r\n    }\r\n    \r\n}\r\nconst timer = new Timer({\r\n    onTick: updateClockFace({ hours, mins, secs })\r\n    // ({ hours, mins, secs })\r\n})\r\n// const timer = {\r\n//     intervalId: null,\r\n//     isActive: false,\r\n//     face: refs.clockface.textContent = `00:00:00`,\r\n    \r\n    \r\n//     start() {\r\n//         if (this.isActive) {\r\n//             return\r\n//         }\r\n//         this.isActive = true\r\n//         const startTime = Date.now()\r\n\r\n//         this.intervalId = setInterval(() => {\r\n//             const currentTime = Date.now()\r\n\r\n//             const deltaTime = currentTime - startTime\r\n//             const { hours, mins, secs} = getTimeComponents(deltaTime)\r\n//             updateClockFace({ hours, mins, secs })\r\n\r\n//         }, 1000)\r\n//         },\r\n//     stop() {\r\n//         clearInterval(this.intervalId)\r\n//         this.isActive = false\r\n//         refs.clockface.textContent = `00:00:00`\r\n//     }\r\n// }\r\n\r\nrefs.btnstart.addEventListener('click', () => {\r\n    timer.start()\r\n})\r\n\r\nrefs.btnstop.addEventListener('click', () => {\r\n    timer.stop()\r\n})\r\nfunction updateClockFace({ hours, mins, secs }) {\r\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`\r\n}\r\n\r\n// function pad(value) {\r\n//     return String(value).padStart(2, '0')\r\n// }\r\n// function getTimeComponents(time) {\r\n// const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n// const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n// const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n//     return { hours, mins, secs}\r\n// }\r\n"]}